CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

INCLUDE(CMakeDependentOption)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckSymbolExists)

PROJECT(YAAVG)

IF (${YAAVG_BINARY_DIR} STREQUAL ${YAAVG_SOURCE_DIR})
	MESSAGE(FATAL_ERROR "In-tree-compile is not prefered.")
ENDIF (${YAAVG_BINARY_DIR} STREQUAL ${YAAVG_SOURCE_DIR})

IF (NOT CMAKE_COMPILER_IS_GNUCC)
	MESSAGE(FATAL_ERROR "Only accept GCC now")
ENDIF (NOT CMAKE_COMPILER_IS_GNUCC)


# Build type
SET(CMAKE_C_FLAGS "-std=gnu99 -Wall -D_GNU_SOURCE")
SET(CMAKE_C_FLAGS_DEBUG "-g -O0")
SET(CMAKE_C_FLAGS_RELEASE "-O2 -DNDEBUG")

SET(BUILD_TESTS OFF CACHE BOOL
	"Whether to build tests")
IF ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	SET(BUILD_TESTS ON CACHE BOOL
		"Whether to build tests" FORCE)
ENDIF ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")


# Options
OPTION(ENABLE_SCREENSHOT "Enable screenshot" ON)
OPTION(STATIC_OPENGL
	"OpenGL linkage, if ON, statically load libGL.so. Affect GLX linkage" OFF)

SET(VIDEO_ENGINE "OpenGL" CACHE STRING
	"Video engine, can be OpenGL or SDL")
SET(VIDEO_DRIVER "SDL" CACHE STRING
	"Video driver, can be GLX or SDL for OpenGL")



# Match driver and engine
IF (${VIDEO_ENGINE} STREQUAL "OpenGL")
	SET(VIDEO_OPENGL_ENGINE	1)
	IF (${VIDEO_DRIVER} STREQUAL "SDL")
		SET(video_setting	"EOpenGLGLDSDL")
		SET(VIDEO_OPENGL_SDL_DRIVER	1)
	ENDIF (${VIDEO_DRIVER} STREQUAL "SDL")
	IF (${VIDEO_DRIVER} STREQUAL "GLX")
		SET(video_setting	"EOpenGLDGLX")
		SET(VIDEO_OPENGL_GLX_DRIVER	1)
	ENDIF (${VIDEO_DRIVER} STREQUAL "GLX")
ENDIF (${VIDEO_ENGINE} STREQUAL "OpenGL")
IF (${VIDEO_ENGINE} STREQUAL "SDL")
	SET(video_setting	"ESDLDSDL")
	SET(VIDEO_SDL_ENGINE	1)
ENDIF (${VIDEO_ENGINE} STREQUAL "SDL")

IF (video_setting MATCHES "^video_setting$")
	MESSAGE(FATAL_ERROR "Video engine and driver setting (${VIDEO_ENGINE}/${VIDEO_DRIVER}) is not supported")
ENDIF(video_setting MATCHES "^video_setting$")

MESSAGE(STATUS "Look for SDL")
FIND_PACKAGE(SDL)
MESSAGE(STATUS "Look for OpenGL")
FIND_PACKAGE(OpenGL)
MESSAGE(STATUS "Look for libpng12")
FIND_PACKAGE(PNG)
MESSAGE(STATUS "Look for X11")
FIND_PACKAGE(X11)


IF (X11_xf86vmode_FOUND)
	SET(HAVE_XF86VMODE 1)
ENDIF(X11_xf86vmode_FOUND)

IF (X11_Xrandr_FOUND)
	SET(HAVE_XRANDR 1)
ENDIF(X11_Xrandr_FOUND)

# Check for SDL options
IF (${video_setting} MATCHES "SDL")
	IF (NOT SDL_FOUND)
		MESSAGE(FATAL_ERROR "SDL not found")
	ENDIF (NOT SDL_FOUND)
	#		MESSAGE(STATUS "${SDL_LIBRARY}")
	#		MESSAGE(STATUS "${SDL_INCLUDE_DIR}")
ENDIF (${video_setting} MATCHES "SDL")


IF (${video_setting} MATCHES "OpenGL")
	IF ((NOT OPENGL_FOUND) OR (NOT OPENGL_GLU_FOUND))
		MESSAGE(FATAL_ERROR "OpenGL not found")
	ENDIF ((NOT OPENGL_FOUND) OR (NOT OPENGL_GLU_FOUND))
	#	MESSAGE(STATUS "OpenGL found")
	#	MESSAGE(STATUS "${OPENGL_LIBRARIES}")
	#	MESSAGE(STATUS "${OPENGL_INCLUDE_DIR}")
ENDIF (${video_setting} MATCHES "OpenGL")

IF (${video_setting} MATCHES "GLX")
	IF (NOT X11_FOUND)
		MESSAGE(FATAL_ERROR "X11 development environment not found")
	ELSE (NOT X11_FOUND)
		# find the Xxf86mv
		IF (X11_Xxf86vm_LIB MATCHES "^X11_Xxf86vm_LIB$")
			MESSAGE(STATUS "X11_Xxf86vm_LIB not set, this is a cmake BUG. Search for it")
			FIND_LIBRARY(X11_Xxf86vm_LIB Xxf86vm ${X11_LIB_SEARCH_PATH})
		ENDIF(X11_Xxf86vm_LIB MATCHES "^X11_Xxf86vm_LIB$")
	ENDIF (NOT X11_FOUND)
ENDIF (${video_setting} MATCHES "GLX")


IF (ENABLE_SCREENSHOT)
	IF (NOT PNG_FOUND)
		MESSAGE(STATUS "Libpng not found, disable screenshot")
		SET(ENABLE_SCREENSHOT OFF  CACHE BOOL "Enable screenshot" FORCE)
	ENDIF(NOT PNG_FOUND)
ENDIF (ENABLE_SCREENSHOT)

# System check
CHECK_INCLUDE_FILES(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES(alloca.h HAVE_ALLOCA_H)
IF (HAVE_ALLOCA_H)
	SET(HAVE_ALLOCA TRUE)
ENDIF (HAVE_ALLOCA_H)
CHECK_FUNCTION_EXISTS(atexit HAVE_ATEXIT)
CHECK_FUNCTION_EXISTS(sigaction HAVE_SIGACTION)
CHECK_INCLUDE_FILES(execinfo.h HAVE_EXECINFO_H)
CHECK_FUNCTION_EXISTS(backtrace HAVE_BACKTRACE)
CHECK_FUNCTION_EXISTS(mallinfo HAVE_MALLINFO)
CHECK_FUNCTION_EXISTS(malloc_stats HAVE_MALLOC_STATS)

CHECK_INCLUDE_FILES(stdbool.h HAVE_STDBOOL_H)
CHECK_INCLUDE_FILES(setjmp.h HAVE_SETJMP_H)
CHECK_SYMBOL_EXISTS(sigsetjmp setjmp.h HAVE_SIGSETJMP)
SET(CMAKE_REQUIRED_LIBRARIES	"-lrt")
# ???
LIST(APPEND LINK_LIBRARIES "-lrt")
CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)

IF (SDL_FOUND)
	SET(HAVE_SDL 1 CACHE INTERNAL "Have SDL support")
ENDIF(SDL_FOUND)
CONFIGURE_FILE(config.h.cmake.in config.h)

ADD_SUBDIRECTORY(src)

# vim:tabstop=4:shiftwidth=4

